"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/summarize-cluster/route";
exports.ids = ["app/api/summarize-cluster/route"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fsummarize-cluster%2Froute&page=%2Fapi%2Fsummarize-cluster%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsummarize-cluster%2Froute.ts&appDir=C%3A%5CUsers%5Cdanie%5CDocuments%5CProjects%5Cimid-cluster-dashboard%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cdanie%5CDocuments%5CProjects%5Cimid-cluster-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!*****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fsummarize-cluster%2Froute&page=%2Fapi%2Fsummarize-cluster%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsummarize-cluster%2Froute.ts&appDir=C%3A%5CUsers%5Cdanie%5CDocuments%5CProjects%5Cimid-cluster-dashboard%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cdanie%5CDocuments%5CProjects%5Cimid-cluster-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_danie_Documents_Projects_imid_cluster_dashboard_src_app_api_summarize_cluster_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/summarize-cluster/route.ts */ \"(rsc)/./src/app/api/summarize-cluster/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/summarize-cluster/route\",\n        pathname: \"/api/summarize-cluster\",\n        filename: \"route\",\n        bundlePath: \"app/api/summarize-cluster/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\danie\\\\Documents\\\\Projects\\\\imid-cluster-dashboard\\\\src\\\\app\\\\api\\\\summarize-cluster\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_danie_Documents_Projects_imid_cluster_dashboard_src_app_api_summarize_cluster_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/summarize-cluster/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZzdW1tYXJpemUtY2x1c3RlciUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGc3VtbWFyaXplLWNsdXN0ZXIlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZzdW1tYXJpemUtY2x1c3RlciUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNkYW5pZSU1Q0RvY3VtZW50cyU1Q1Byb2plY3RzJTVDaW1pZC1jbHVzdGVyLWRhc2hib2FyZCU1Q3NyYyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q1VzZXJzJTVDZGFuaWUlNUNEb2N1bWVudHMlNUNQcm9qZWN0cyU1Q2ltaWQtY2x1c3Rlci1kYXNoYm9hcmQmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ3lEO0FBQ3RJO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1pZC1jbHVzdGVyLWRhc2hib2FyZC8/YWNmOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxkYW5pZVxcXFxEb2N1bWVudHNcXFxcUHJvamVjdHNcXFxcaW1pZC1jbHVzdGVyLWRhc2hib2FyZFxcXFxzcmNcXFxcYXBwXFxcXGFwaVxcXFxzdW1tYXJpemUtY2x1c3RlclxcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvc3VtbWFyaXplLWNsdXN0ZXIvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9zdW1tYXJpemUtY2x1c3RlclwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvc3VtbWFyaXplLWNsdXN0ZXIvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJDOlxcXFxVc2Vyc1xcXFxkYW5pZVxcXFxEb2N1bWVudHNcXFxcUHJvamVjdHNcXFxcaW1pZC1jbHVzdGVyLWRhc2hib2FyZFxcXFxzcmNcXFxcYXBwXFxcXGFwaVxcXFxzdW1tYXJpemUtY2x1c3RlclxcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvc3VtbWFyaXplLWNsdXN0ZXIvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fsummarize-cluster%2Froute&page=%2Fapi%2Fsummarize-cluster%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsummarize-cluster%2Froute.ts&appDir=C%3A%5CUsers%5Cdanie%5CDocuments%5CProjects%5Cimid-cluster-dashboard%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cdanie%5CDocuments%5CProjects%5Cimid-cluster-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/summarize-cluster/route.ts":
/*!************************************************!*\
  !*** ./src/app/api/summarize-cluster/route.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/prisma */ \"(rsc)/./src/lib/prisma.ts\");\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/@google/generative-ai/dist/index.mjs\");\n\n\n\n// Initialize the Google Generative AI client\nconst genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_2__.GoogleGenerativeAI(process.env.GEMINI_API_KEY || \"\");\nconst MODEL_NAME = \"gemini-1.5-flash\";\nasync function POST(request) {\n    // Validate the request\n    let clusterRequest;\n    try {\n        const body = await request.json();\n        if (typeof body.clusterId !== \"number\") {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Invalid clusterId provided. Must be a number.\"\n            }, {\n                status: 400\n            });\n        }\n        // Default to 'kmeans' if not specified\n        const clusterType = body.clusterType || \"kmeans\";\n        if (clusterType !== \"kmeans\" && clusterType !== \"dbscan\") {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Invalid clusterType. Must be \"kmeans\" or \"dbscan\".'\n            }, {\n                status: 400\n            });\n        }\n        clusterRequest = {\n            clusterId: body.clusterId,\n            clusterType\n        };\n    } catch (error) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Invalid request body. Could not parse JSON.\"\n        }, {\n            status: 400\n        });\n    }\n    // Check for API key\n    if (!process.env.GEMINI_API_KEY) {\n        console.error(\"GEMINI_API_KEY is not set in environment variables.\");\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Server configuration error: Missing API Key.\"\n        }, {\n            status: 500\n        });\n    }\n    try {\n        const { clusterId, clusterType } = clusterRequest;\n        // Determine which field to query based on cluster type\n        const clusterField = clusterType === \"dbscan\" ? \"dbscanClusterId\" : \"clusterId\";\n        // 1. Fetch patients in the cluster\n        const patientsInCluster = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__[\"default\"].patient.findMany({\n            where: {\n                [clusterField]: clusterId\n            },\n            select: {\n                id: true,\n                birthdate: true,\n                conditions: {\n                    select: {\n                        description: true\n                    }\n                },\n                medications: {\n                    select: {\n                        description: true\n                    }\n                }\n            }\n        });\n        if (patientsInCluster.length === 0) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                summary: `No patients found for ${clusterType.toUpperCase()} Cluster ID ${clusterId}.`\n            });\n        }\n        // 2. Aggregate cluster data\n        const clusterData = aggregateClusterData(patientsInCluster);\n        // 3. Generate summary using Gemini\n        const summary = await generateClusterSummary(clusterData, clusterRequest);\n        // 4. Return the summary\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            summary\n        });\n    } catch (error) {\n        console.error(`Error processing ${clusterRequest.clusterType} cluster ${clusterRequest.clusterId}:`, error);\n        // Check if the error is from the Gemini API specifically\n        if (error instanceof Error && error.message.includes(\"API key\")) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Invalid API Key or API error.\"\n            }, {\n                status: 500\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to generate cluster summary.\"\n        }, {\n            status: 500\n        });\n    }\n}\n/**\r\n * Aggregates patient data to produce statistics for the cluster\r\n */ function aggregateClusterData(patients) {\n    // Calculate patient count\n    const patientCount = patients.length;\n    // Calculate average age\n    const totalAge = patients.reduce((sum, patient)=>{\n        const birthdate = new Date(patient.birthdate);\n        const today = new Date();\n        const age = today.getFullYear() - birthdate.getFullYear() - (today.getMonth() < birthdate.getMonth() || today.getMonth() === birthdate.getMonth() && today.getDate() < birthdate.getDate() ? 1 : 0);\n        return sum + age;\n    }, 0);\n    const averageAge = patientCount > 0 ? Math.round(totalAge / patientCount) : 0;\n    // Calculate common conditions\n    const conditionCounts = {};\n    patients.forEach((p)=>{\n        p.conditions.forEach((c)=>{\n            if (c.description) {\n                conditionCounts[c.description] = (conditionCounts[c.description] || 0) + 1;\n            }\n        });\n    });\n    const commonConditions = Object.entries(conditionCounts).sort(([, a], [, b])=>b - a).slice(0, 5) // Top 5\n    .map(([desc, count])=>`${desc} (${count} patients)`);\n    // Calculate common medications\n    const medicationCounts = {};\n    patients.forEach((p)=>{\n        p.medications.forEach((m)=>{\n            if (m.description) {\n                medicationCounts[m.description] = (medicationCounts[m.description] || 0) + 1;\n            }\n        });\n    });\n    const commonMedications = Object.entries(medicationCounts).sort(([, a], [, b])=>b - a).slice(0, 5) // Top 5\n    .map(([desc, count])=>`${desc} (${count} patients)`);\n    return {\n        patientCount,\n        averageAge,\n        commonConditions,\n        commonMedications\n    };\n}\n/**\r\n * Generates a summary for the cluster using the Gemini API\r\n */ async function generateClusterSummary(data, request) {\n    const { clusterId, clusterType } = request;\n    // Construct prompt for Gemini\n    const prompt = `\r\nSummarize the key characteristics of this patient cluster based on the following data. Focus on demographics, common conditions, and medication patterns. Keep the summary concise (2-3 sentences).\r\n\r\nClustering Method: ${clusterType.toUpperCase()}\r\nCluster ID: ${clusterId}\r\nNumber of Patients: ${data.patientCount}\r\nAverage Age: ${data.averageAge} years\r\nMost Common Conditions (up to 5): ${data.commonConditions.length ? data.commonConditions.join(\", \") : \"N/A\"}\r\nMost Common Medications (up to 5): ${data.commonMedications.length ? data.commonMedications.join(\", \") : \"N/A\"}\r\n\r\nSummary:\r\n`;\n    try {\n        // Call Gemini API\n        const model = genAI.getGenerativeModel({\n            model: MODEL_NAME\n        });\n        const result = await model.generateContent(prompt);\n        const response = await result.response;\n        return response.text();\n    } catch (error) {\n        console.error(\"Error calling Gemini API:\", error);\n        throw error;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/summarize-cluster/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/prisma.ts":
/*!***************************!*\
  !*** ./src/lib/prisma.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n\n\n// Define global type for PrismaClient\nconst globalForPrisma = global;\n// Use absolute path for database\nconst dbPath = path__WEBPACK_IMPORTED_MODULE_1___default().resolve(process.cwd(), \"prisma/dev.db\");\nconst url = `file:${dbPath}`;\n// Create a singleton instance of the Prisma client\nconst prisma = globalForPrisma.prisma || new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient({\n    log:  true ? [\n        \"error\"\n    ] : 0,\n    datasources: {\n        db: {\n            url\n        }\n    }\n});\n// Save the instance to the global object in non-production environments\nif (true) {\n    globalForPrisma.prisma = prisma;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (prisma);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3ByaXNtYS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBNkM7QUFDdEI7QUFFdkIsc0NBQXNDO0FBQ3RDLE1BQU1FLGtCQUFrQkM7QUFFeEIsaUNBQWlDO0FBQ2pDLE1BQU1DLFNBQVNILG1EQUFZLENBQUNLLFFBQVFDLEdBQUcsSUFBSTtBQUMzQyxNQUFNQyxNQUFNLENBQUMsS0FBSyxFQUFFSixPQUFPLENBQUM7QUFFNUIsbURBQW1EO0FBQzVDLE1BQU1LLFNBQ1hQLGdCQUFnQk8sTUFBTSxJQUN0QixJQUFJVCx3REFBWUEsQ0FBQztJQUNmVSxLQUFLSixLQUF5QixHQUFnQjtRQUFDO0tBQVEsR0FBRyxDQUFFO0lBQzVESyxhQUFhO1FBQ1hDLElBQUk7WUFDRko7UUFDRjtJQUNGO0FBQ0YsR0FBRTtBQUVKLHdFQUF3RTtBQUN4RSxJQUFJRixJQUF5QixFQUFjO0lBQ3pDSixnQkFBZ0JPLE1BQU0sR0FBR0E7QUFDM0I7QUFFQSxpRUFBZUEsTUFBTUEsRUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL2ltaWQtY2x1c3Rlci1kYXNoYm9hcmQvLi9zcmMvbGliL3ByaXNtYS50cz8wMWQ3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByaXNtYUNsaWVudCB9IGZyb20gJ0BwcmlzbWEvY2xpZW50J1xyXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xyXG5cclxuLy8gRGVmaW5lIGdsb2JhbCB0eXBlIGZvciBQcmlzbWFDbGllbnRcclxuY29uc3QgZ2xvYmFsRm9yUHJpc21hID0gZ2xvYmFsIGFzIHVua25vd24gYXMgeyBwcmlzbWE6IFByaXNtYUNsaWVudCB9XHJcblxyXG4vLyBVc2UgYWJzb2x1dGUgcGF0aCBmb3IgZGF0YWJhc2VcclxuY29uc3QgZGJQYXRoID0gcGF0aC5yZXNvbHZlKHByb2Nlc3MuY3dkKCksICdwcmlzbWEvZGV2LmRiJylcclxuY29uc3QgdXJsID0gYGZpbGU6JHtkYlBhdGh9YFxyXG5cclxuLy8gQ3JlYXRlIGEgc2luZ2xldG9uIGluc3RhbmNlIG9mIHRoZSBQcmlzbWEgY2xpZW50XHJcbmV4cG9ydCBjb25zdCBwcmlzbWEgPVxyXG4gIGdsb2JhbEZvclByaXNtYS5wcmlzbWEgfHxcclxuICBuZXcgUHJpc21hQ2xpZW50KHtcclxuICAgIGxvZzogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgPyBbJ2Vycm9yJ10gOiBbXSxcclxuICAgIGRhdGFzb3VyY2VzOiB7XHJcbiAgICAgIGRiOiB7XHJcbiAgICAgICAgdXJsLFxyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICB9KVxyXG5cclxuLy8gU2F2ZSB0aGUgaW5zdGFuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QgaW4gbm9uLXByb2R1Y3Rpb24gZW52aXJvbm1lbnRzXHJcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgZ2xvYmFsRm9yUHJpc21hLnByaXNtYSA9IHByaXNtYVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBwcmlzbWEgIl0sIm5hbWVzIjpbIlByaXNtYUNsaWVudCIsInBhdGgiLCJnbG9iYWxGb3JQcmlzbWEiLCJnbG9iYWwiLCJkYlBhdGgiLCJyZXNvbHZlIiwicHJvY2VzcyIsImN3ZCIsInVybCIsInByaXNtYSIsImxvZyIsImRhdGFzb3VyY2VzIiwiZGIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/prisma.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@google"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fsummarize-cluster%2Froute&page=%2Fapi%2Fsummarize-cluster%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsummarize-cluster%2Froute.ts&appDir=C%3A%5CUsers%5Cdanie%5CDocuments%5CProjects%5Cimid-cluster-dashboard%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cdanie%5CDocuments%5CProjects%5Cimid-cluster-dashboard&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();